dist: xenial
language: node_js
cache: yarn
services:
  - docker
env:
  global:
    - MONGO_INITDB_DATABASE=get_fit
    - MONGO_PROD_DBNAME=get_fit
    - MONGO_LOCAL_PORT=27017
    - MONGO_LOCAL_SERVICENAME=mongo

# Do nothing as the install command, since we are using Docker
install: ''

# When to run certain stages
stages:
  - name: build_tests
    # Don't run!
    if: false IS true
  - name: tests
    # Don't run!
    if: false IS true
  - name: cleanup_tests
    # Don't run!
    if: false IS true
  - name: build_and_deploy_tagged
    if: tag IS present
  - name: build_and_deploy_release
    if: branch =~ ^release

# Run our tests
jobs:
  include:
    # Build the test containers before the tests
    - stage: 'build_tests'
      name: 'Build Test Images'
      script: yarn build:test
    # Run our tests
    - stage: 'tests'
      name: 'Unit Tests'
      script: yarn up:test
    # Clean up after our tests
    - stage: 'cleanup_tests'
      name: 'Clean Up Tests'
      script: yarn down:test
    # Build & Deploy prod images if we're tagged
    - stage: 'deploy_tagged'
      name: 'Deploy Tagged Image'
      env: DOCKER_TAG="$TRAVIS_TAG-$TRAVIS_BUILD_NUMBER"
      script:
        - echo "Deploying Image $DOCKER_TAG"
        - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
        - yarn push
    # Build & Deploy prod images if we're  on a release branch
    - stage: 'deploy_release'
      name: 'Deploy Release Image'
      env: DOCKER_TAG="$TRAVIS_BRANCH-$TRAVIS_BUILD_NUMBER"
      script:
        - echo "Deploying Image $DOCKER_TAG"
        - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
        - yarn push
