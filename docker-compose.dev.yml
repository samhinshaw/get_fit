version: '3' # this specifies the docker-compose version

services:
  mongo:
    # Build the Dockerfile in the root of the mongo/ folder
    build: mongo
    image: get_fit_mongo:latest
    # Expose the default mongoDB port. In contrast to the
    # docker-compose.test.yml, here we use the more traditional "ports"
    # configuration. This means that this port is exposed to our local machine,
    # not just the other docker-compose services. This SO post explains it well:
    # https://stackoverflow.com/questions/40801772/what-is-the-difference-between-docker-compose-ports-vs-expose
    ports:
      - '27017:27017'
    # And add the environment variables within our secret .env file
    env_file:
      - .env
  # Start backend Express.js server
  node:
    build: .
    image: get_fit:latest
    # Set the NODE_ENV to the dev environment
    environment:
      - NODE_ENV=development
    command: ['yarn', 'dev:server']
    ports:
      - '8005:8005'
    # And add the environment variables within our secret .env file
    env_file:
      - .env
    # Mount the codebase to the container for live-reloading
    volumes:
      - ./:/app/
      # Mount nothing to the node_modules folder so that it can be overwritten
      # within the container. (Trailing slash important.)
      # This SO post contains a few different techniques for tackling this problem, as well
      # as the solution I've used here.
      # https://stackoverflow.com/questions/29181032/add-a-volume-to-docker-but-exclude-a-sub-folder
      - /app/node_modules/
  # Start Webpack. This just operates on the `public/src` to generate
  # `public/dist`, which is served by the backend, so no port exposure is
  # necessary. We're running webpack in watch mode, not the webpack dev server.
  # Since we've bind mounted our codebase into both containers, the changes will
  # be reflected live for our backend container.
  ui:
    build: .
    image: get_fit:latest
    # Set the NODE_ENV to the dev environment
    environment:
      - NODE_ENV=development
    command: ['yarn', 'dev:ui']
    # Mount the codebase to the container for live-reloading
    volumes:
      - ./:/app/
      # Mount nothing to the node_modules folder so that it can be overwritten
      # within the container. (Trailing slash important.)
      # This SO post contains a few different techniques for tackling this problem, as well
      # as the solution I've used here.
      # https://stackoverflow.com/questions/29181032/add-a-volume-to-docker-but-exclude-a-sub-folder
      - /app/node_modules/
